import json
import os
import threading
import telebot
import random
import datetime
import pytz
from config import ALLOWED_USERS, BACKGROUND_IMAGE, CHAT_ID, COLOR_NAME, COLOR_TEXT, DATA_FILE, FONT_NAME, FONT_SIZE_NAME, FONT_SIZE_TEXT, FONT_TEXT, MEDIA_FOLDER, RIGHT_NOW_FILE, TOKEN
from data import members, metro_lines, metro_stations, TIME_VARIANTS, THOUGHTFUL_PHRASES, savee_data
import telebot
from telebot.types import ChatPermissions
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
import re
import time

bot = telebot.TeleBot(TOKEN)

bot.set_my_commands([
    telebot.types.BotCommand("start", "–ü—Ä–∏–≤–µ—Ç, —Å–ø–∏—à—å?"),
    telebot.types.BotCommand("info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ"),
    telebot.types.BotCommand("ship", "–°–ª—É—á–∞–π–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤—É—Ö –ª—é–¥–µ–π –≤ –ø–∞—Ä—É"),
    telebot.types.BotCommand("okdnya", "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –û–ö–∞ –¥–Ω—è"),
    telebot.types.BotCommand("quote", "–£–≤–µ–∫–æ–≤–µ—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É"),
    telebot.types.BotCommand("think", "–¶–∏—Ç–∞—Ç–∞ –∫ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—é"),
    telebot.types.BotCommand("when", "–ó–∞–≥–ª—è–Ω—É—Ç—å –≤ –±—É–¥—É—â–µ–µ"),
    telebot.types.BotCommand("daddy", "–û—Ç–µ—Ü –±–æ—Ç–∞"),
    telebot.types.BotCommand("compat", "–†–∞—Å—Å—á—ë—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–≤—É—Ö –û–ö–æ–≤"),
    telebot.types.BotCommand("who", "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫—Ç–æ –∏–∑ –Ω–∞—Å..."),
    telebot.types.BotCommand("prob", "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è"),
    telebot.types.BotCommand("top", "–í—ã–≤–æ–¥–∏—Ç –ª—É—á—à–∏—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ"),
    telebot.types.BotCommand("ranking", "–†–µ–π—Ç–∏–Ω–≥ –û–ö - –Ω–µ–û–ö"),
    telebot.types.BotCommand("ok", "–û–ö–Ω—É—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)"),
    telebot.types.BotCommand("neok", "–Ω–µ–û–ö–Ω—É—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)"),
    telebot.types.BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
])


@bot.message_handler(commands=["start"])
def start(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ñ–ª—É–¥–∞ –û–ö–æ–≤ 2025! –í–≤–µ–¥–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.")
  
    
@bot.message_handler(commands=['metro'])
def find_members_by_metro(message):
    line_query = message.text.split(maxsplit=1)
    if len(line_query) < 2:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä, —Ü–≤–µ—Ç –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏ –º–µ—Ç—Ä–æ.")
        return
    
    line_input = line_query[1].strip().lower()
    line_number = None
    
    for num, names in metro_lines.items():
        if line_input in [num] + [name.lower() for name in names]:
            line_number = num
            break
    
    if not line_number:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—É—é –ª–∏–Ω–∏—é –º–µ—Ç—Ä–æ.")
        return
    
    stations_on_line = metro_stations.get(line_number, [])
    found_members = [f"{m['first_name']} {m['last_name']} ({m['metro']})" for m in members if m['metro'] in stations_on_line]
    
    if found_members:
        bot.reply_to(message, f"–û–±—É—á–∞—é—â–∏–µ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã, –∂–∏–≤—É—â–∏–µ –Ω–∞ {line_number} –ª–∏–Ω–∏–∏ –º–µ—Ç—Ä–æ:\n" + "\n".join(found_members))
    else:
        bot.reply_to(message, "–ù–∞ —ç—Ç–æ–π –ª–∏–Ω–∏–∏ –º–µ—Ç—Ä–æ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –û–ö–∞. –ù–µ –ø–æ–≤–µ–∑–ª–æ –µ–π!")


def send_member_info(message, member):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ."""
    info = (
        f"üë§ {member['formal_last_name']} {member['formal_first_name']} {member['mrespectdle_name']}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {member['birth_date']}\n"
        f"üè´ –§–∞–∫—É–ª—å—Ç–µ—Ç: {member['faculty']}\n"
        f"üéì –ì—Ä—É–ø–ø–∞: {member['group']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {member['phone']}\n"
        f"üìß –ü–æ—á—Ç–∞: {member['email']}\n"
        f"üí¨ Telegram: {member['telegram']}\n"
        f"üöá –°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ: {member['metro']}\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –ø—Ä–æ –õ–∏–ª—é (–æ–Ω–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å–∏–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å): –≤ 8 –ª–µ—Ç —á—É—Ç—å –Ω–µ —É—Ç–æ–Ω—É–ª–∞ –≤ –ª—è–≥—É—à–∞—Ç–Ω–∏–∫–µ (–¥–µ—Ç—Å–∫–æ–º –±–∞—Å—Å–µ–π–Ω–µ –≤ —à–∫–æ–ª–µ)"
    )
    bot.reply_to(message, info)

@bot.message_handler(commands=["–¥—É—ç–ª—å"])
def duel(message):
    if not message.reply_to_message:
        bot.reply_to(message, "–ö–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    challenger = message.from_user  # –ê–≤—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã
    opponent = message.reply_to_message.from_user  # –¢–æ—Ç, –Ω–∞ –∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∏–ª–∏

    if challenger.id == opponent.id:
        bot.reply_to(message, "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å –¥—É—ç–ª—å —Å–∞–º —Å —Å–æ–±–æ–π!")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º Telegram usernames —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    challenger_telegram = f"@{challenger.username}" if challenger.username else None
    opponent_telegram = f"@{opponent.username}" if opponent.username else None

    # –ü–æ–ª—É—á–∞–µ–º –∏—Ö first name –∏–∑ —Å–ø–∏—Å–∫–∞ members
    challenger_name = next((m["first_name"] for m in members if m["telegram"] == challenger_telegram), challenger.first_name)
    opponent_name = next((m["first_name"] for m in members if m["telegram"] == opponent_telegram), opponent.first_name)

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    winner, loser = random.sample([(challenger, challenger_name), (opponent, opponent_name)], 2)
    loser_telegram = f"@{loser[0].username}" if loser[0].username else None

    if loser_telegram in ALLOWED_USERS:
        bot.reply_to(
            message,
            f"üí• –î—É—ç–ª—å —Å–æ—Å—Ç–æ—è–ª–∞—Å—å! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî {winner[1]}!\n"
            f"üé≠ {loser[1]} –ø—Ä–æ–∏–≥—Ä–∞–ª, –Ω–æ –µ–º—É –ø—Ä–æ—â–∞–µ—Ç—Å—è —ç—Ç–∞ –¥—É—ç–ª—å!"
        )
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞
    mute_duration = random.randint(60, 1200)  # 1 –º–∏–Ω—É—Ç–∞ –∏–ª–∏ 10 –º–∏–Ω—É—Ç

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
    bot.reply_to(
        message,
        f"üí• –î—É—ç–ª—å —Å–æ—Å—Ç–æ—è–ª–∞—Å—å! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî {winner[1]}!\n"
        f"üòµ {loser[1]} –ø—Ä–æ–∏–≥—Ä–∞–ª –∏ –ø–æ–ª—É—á–∞–µ—Ç –º—É—Ç –Ω–∞ {mute_duration // 60} –º–∏–Ω—É—Ç!"
    )

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
    try:
        bot.restrict_chat_member(
            message.chat.id,
            loser[0].id,
            until_date=int(time.time()) + mute_duration,
            can_send_messages=False,
            can_send_media_messages=False,
            can_send_other_messages=False,
            can_add_web_page_previews=False
        )
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")

@bot.message_handler(commands=["–º—É—Ç"])
def mute_command(message):
    if message.from_user.username and f"@{message.from_user.username}" not in ALLOWED_USERS:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return

    if not message.reply_to_message:
        bot.reply_to(message, "‚ö† –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º—å—é—Ç–∏—Ç—å!")
        return

    user_id = message.reply_to_message.from_user.id
    username = f"@{message.reply_to_message.from_user.username}" if message.reply_to_message.from_user.username else None

    # –°–ø–µ—Ü–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è @samolil
    if username in ALLOWED_USERS:
        bot.reply_to(message, f"üé≠ {username} –Ω–µ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω –º—É—Ç—É!")
        return

    # –ï—Å–ª–∏ –º—É—Ç—è—â–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ ALLOWED_USERS, —Ç–æ –º—É—Ç –Ω–∞ 1 –º–∏–Ω—É—Ç—É, –∏–Ω–∞—á–µ –Ω–∞ 10 –º–∏–Ω—É—Ç
    mute_time = 600  # 1 –º–∏–Ω—É—Ç–∞ –∏–ª–∏ 10 –º–∏–Ω—É—Ç
    until_timestamp = int(time.time()) + mute_time

    try:
        bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_id,
            permissions=telebot.types.ChatPermissions(can_send_messages=False),
            until_date=until_timestamp
        )
        bot.reply_to(message, f"üîá {message.reply_to_message.from_user.first_name} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {mute_time // 60} –º–∏–Ω—É—Ç!")
    except Exception as e:
        bot.reply_to(message, f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ: {e}")


@bot.message_handler(commands=["–∞–Ω–º—É—Ç"])
def unmute_command(message):
    if message.from_user.username and f"@{message.from_user.username}" not in ALLOWED_USERS:
        bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return

    if not message.reply_to_message:
        bot.reply_to(message, "‚ö† –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–º—å—é—Ç–∏—Ç—å!")
        return

    user_id = message.reply_to_message.from_user.id

    try:
        bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_id,
            permissions=telebot.types.ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_polls=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
                can_change_info=True,
                can_invite_users=True,
                can_pin_messages=True
            )
        )
        bot.reply_to(message, f"üîä {message.reply_to_message.from_user.first_name} —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å!")
    except Exception as e:
        bot.reply_to(message, f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—å—é—Ç–µ: {e}")

@bot.message_handler(func=lambda message: re.search(r'\b—Å–ø–æ–∫–æ–π–Ω–æ–π\b.*\b–Ω–æ—á–∏\b.*\b–æ–∫–∏\b', message.text, re.IGNORECASE))
def good_morning_kvs(message):
    user_telegram = f"@{message.from_user.username}" if message.from_user.username else None
    member = next((m for m in members if m["telegram"] == user_telegram), None)

    first_name = member["first_name"] if member else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –û–ö"

    bot.reply_to(message, f"–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, {first_name} üíú\n–ó–∞–≤—Ç—Ä–∞ —Ç—ã –±—É–¥–µ—à—å —Å–Ω–æ–≤–∞ —Å–≤–µ—Ç–∏—Ç—å!")


@bot.message_handler(commands=["—Ö—É–π"])
def dick_size(message):
    sender_username = f"@{message.from_user.username}" if message.from_user.username else None
    member = next((m for m in members if m["telegram"] == sender_username), None)

    name = member["first_name"] if member else message.from_user.first_name
    size = int(1000 * (random.random() ** 3))-1
    bot.reply_to(message, f"{name}, —Ç–≤–æ–π —Ö—É–π {size} —Å–º üçÜ")


@bot.message_handler(commands=["–∏–Ω—Ñ–∞", "info"])
def get_member_info(message):
    args = message.text.split(maxsplit=2)

    if len(args) == 1 and message.reply_to_message:  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        reply_user = message.reply_to_message.from_user.username
        if reply_user:
            member = next((m for m in members if m['telegram'].strip('@') == reply_user), None)
            if member:
                send_member_info(message, member)
                return

    if len(args) < 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–∏–Ω—Ñ–∞ –§–∞–º–∏–ª–∏—è [–ò–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)] –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤.")
        return

    last_name = args[1].strip().lower()
    first_name = args[2].strip().lower() if len(args) > 2 else None

    found_members = [
        m for m in members if (m["last_name"].lower() == last_name or m["formal_last_name"].lower() == last_name)
        and (first_name is None or m["first_name"].lower() == first_name or m["formal_first_name"].lower() == first_name)
    ]

    if not found_members:
        bot.reply_to(message, "–û–ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if len(found_members) > 1 and first_name is None:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        commands_list = "\n".join(f"`/–∏–Ω—Ñ–∞ {m['last_name']} {m['first_name']}`" for m in found_members)
        bot.reply_to(message, f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –û–ö–æ–≤ —Å —Ñ–∞–º–∏–ª–∏–µ–π {last_name.capitalize()}.\n"
                              f"–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∏—Ö, –≤–≤–µ–¥—è –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n{commands_list}", parse_mode="Markdown")
        return

    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –∫–≤–∞—Å—ë–Ω—ã—à
    send_member_info(message, found_members[0])

        

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
last_all_request = {}

moscow_tz = pytz.timezone("Europe/Moscow")


@bot.message_handler(commands=["all", "–≤—Å–µ"])
def mention_everyone(message):
    user_telegram = f"@{message.from_user.username}" if message.from_user.username else None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
    if user_telegram not in ALLOWED_USERS:
        bot.reply_to(message, "–¢–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∫–æ–º–∞!")
        return

    now = time.time()  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    last_request = last_all_request.get(user_telegram, 0)

    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 20 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
    if now - last_request < 20:
        mentions = " ".join(m["telegram"] for m in members if m["telegram"])
        # mentions = "@melankolya"
        bot.send_message(message.chat.id, mentions)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã
        last_all_request[user_telegram] = now

        current_time = datetime.datetime.now(moscow_tz).strftime("%H:%M")
        bot.reply_to(
            message,
            f"–¢—ã —É–≤–µ—Ä–µ–Ω(-–∞), —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞? –°–µ–π—á–∞—Å {current_time}\n"
            f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑: `/all`",
        parse_mode="Markdown")


def send_wakeup_message(chat_id, member):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    wakeup_text = f"{member['telegram']} {member['telegram']} {member['telegram']}\n\n" \
                  f"–ü—Ä–æ—Å–Ω–∏—Å—å! –í–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {member['phone']}. –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –µ–º—É —É–∂–µ!"
    bot.send_message(chat_id, wakeup_text)
    

@bot.message_handler(commands=["—Ä–∞–∑–¥–µ–ª–∏—Ç—å"])
def divide_into_teams(message):
    args = message.text.split()
    
    if len(args) < 2 or not args[1].isdigit():
        bot.reply_to(message, "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: /—Ä–∞–∑–¥–µ–ª–∏—Ç—å 3")
        return
    
    num_teams = int(args[1])
    if num_teams < 1:
        bot.reply_to(message, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –Ω–µ "–û—Ä–≥–∫–æ–º"
    ok_members = [m for m in members if m.get("role") != "–û—Ä–≥–∫–æ–º"]
    
    if num_teams > len(ok_members):
        bot.reply_to(message, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–º–∞–Ω–¥! –£ –Ω–∞—Å –≤—Å–µ–≥–æ {len(ok_members)} –û–ö–æ–≤.")
        return

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥—ã –±—ã–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏
    random.shuffle(ok_members)
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    teams = [[] for _ in range(num_teams)]
    for i, member in enumerate(ok_members):
        teams[i % num_teams].append(member)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    response = "–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã:\n\n"
    for i, team in enumerate(teams, 1):
        response += f"–ö–æ–º–∞–Ω–¥–∞ {i}:\n"
        for member in team:
            response += f" - {member['first_name']} {member['last_name']}\n"
        response += "\n"

    bot.reply_to(message, response)
    

@bot.message_handler(commands=["—Ä–∞–∑–±—É–¥–∏—Ç—å"])
def set_wakeup_call(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /—Ä–∞–∑–±—É–¥–∏—Ç—å."""
    command_parts = message.text.split()
    if len(command_parts) != 2:
        bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: /—Ä–∞–∑–±—É–¥–∏—Ç—å 08:30")
        return

    match = re.fullmatch(r"([01]\d|2[0-3]):([0-5]\d)", command_parts[1])
    if not match:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:45).")
        return

    hours, minutes = map(int, match.groups())

    # –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ members
    sender_username = f"@{message.from_user.username}" if message.from_user.username else None
    member = next((m for m in members if m["telegram"] == sender_username), None)

    if not member:
        bot.reply_to(message, "‚ùå –í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ, –Ω–µ –º–æ–≥—É –≤–∞—Å —Ä–∞–∑–±—É–¥–∏—Ç—å.")
        return

    now = datetime.datetime.now(moscow_tz)
    wakeup_time = now.replace(hour=hours, minute=minutes, second=0, microsecond=0)

    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è ‚Äî —Å—Ç–∞–≤–∏–º –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    if wakeup_time <= now:
        wakeup_time += datetime.timedelta(days=1)

    time_diff = (wakeup_time - now).total_seconds()

    bot.reply_to(message, f"‚úÖ –ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {wakeup_time.strftime('%H:%M')}. –ë–µ–≥–∏ –≤—ã—Å—ã–ø–∞—Ç—å—Å—è, 2 —á–∞—Å–∞ —Å–Ω–∞ - –Ω–µ–û–ö!")

    # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
    threading.Thread(target=lambda: (time.sleep(time_diff), send_wakeup_message(message.chat.id, member))).start()


@bot.message_handler(commands=['—à–∏–ø–ø–µ—Ä–∏—Ç—å', "ship"])
def ship_people(message):
    phrases = ['–æ—Ç–ª–∏—á–Ω–æ —Å–º–æ—Ç—Ä—è—Ç—Å—è –≤–º–µ—Å—Ç–µ', '—Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –æ–¥–Ω–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ', '–ø–æ–¥—Ö–æ–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É']
    
    if message.reply_to_message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        reply_user = message.reply_to_message.from_user.username
        if reply_user:
            person1 = next((m for m in members if m['telegram'].strip('@') == reply_user), None)
            if person1:
                person2 = random.choice([m for m in members if m != person1])  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ
                ship_message = f"{person1['first_name']} {person1['last_name']} –∏ {person2['first_name']} {person2['last_name']} {random.choice(phrases)}"
                bot.reply_to(message, ship_message)
                return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —é–∑–µ—Ä ‚Äî —à–∏–ø–ø–µ—Ä–∏–º —Å–ª—É—á–∞–π–Ω—ã—Ö –ª—é–¥–µ–π
    person1, person2 = random.sample(members, 2)
    ship_message = f"{person1['first_name']} {person1['last_name']} –∏ {person2['first_name']} {person2['last_name']} {random.choice(phrases)}"
    bot.reply_to(message, ship_message)
    

@bot.message_handler(commands=["—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", "compat"])
def compatibility(message):
    if message.reply_to_message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        reply_user = message.reply_to_message.from_user.username
        if reply_user:
            person1 = next((m for m in members if m['telegram'].strip('@') == reply_user), None)
            if person1:
                person2 = random.choice([m for m in members if m != person1])  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ç–æ—Ä–æ–≥–æ
                compatibility_score = random.randint(-100, 100)
                result_message = (
                    f"üîÆ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å {person1['first_name']} {person1['last_name']} –∏ "
                    f"{person2['first_name']} {person2['last_name']}: {compatibility_score}!"
                )
                bot.reply_to(message, result_message)
                return

    # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —é–∑–µ—Ä ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –¥–≤—É—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –ª—é–¥–µ–π
    person1, person2 = random.sample(members, 2)
    compatibility_score = random.randint(-100, 100)
    result_message = (
        f"üîÆ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å {person1['first_name']} {person1['last_name']} –∏ "
        f"{person2['first_name']} {person2['last_name']}: {compatibility_score}!"
    )

    bot.reply_to(message, result_message)


@bot.message_handler(commands=['–∫—Ç–æ', "who"])
def who(message):
    person = random.sample(members, 1)[0]
    ret_message = f"{person['first_name']} {person['last_name']} {' '.join(message.text.split(' ')[1:]) if len(message.text.split(' ')) > 1 else ''}"
    bot.reply_to(message, ret_message)
    

moscow_tz = pytz.timezone("Europe/Moscow")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"last_pidor": None, "last_date_p": None, "last_xozyain": None, "last_date_x": None}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
data = load_data()

@bot.message_handler(commands=['–æ–∫–¥–Ω—è', "okdnya"])
def get_hero_of_the_day(message):
    now = datetime.datetime.now(moscow_tz)
    today = str(now.date())  # –î–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

    if data["last_date_x"] != today or data["last_xozyain"] is None:
        chosen_xozyain = random.choice(members)
        data["last_xozyain"] = chosen_xozyain
        data["last_date_x"] = today
        save_data(data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

    last_xozyain = data["last_xozyain"]

    activist_message = (
        f"–û–ö –¥–Ω—è - {last_xozyain['first_name']} {last_xozyain['last_name']}! üéâ\n"
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {last_xozyain['telegram']} {last_xozyain['telegram']} {last_xozyain['telegram']}!!!"
    )
    bot.reply_to(message, activist_message)


@bot.message_handler(commands=["+", "-", "ok", "neok"])
def change_respect(message):
    if not message.reply_to_message:  
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ

    reply_user = message.reply_to_message.from_user.username
    sender_user = message.from_user.username

    if not reply_user or not sender_user or (reply_user == sender_user and sender_user != "melankolya"):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —ç—Ç–æ —Å–∞–º–æ—Ä–µ—Å–ø–µ–∫—Ç

    member = next((m for m in members if m['telegram'].strip('@') == reply_user), None)
    if not member:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ

    if "respect" not in member:
        member["respect"] = 0  

    if message.text.startswith("/+") or message.text.startswith("/ok"):
        value = 1
        if sender_user == "melankolya":
            parts = message.text.split()
            if len(parts) > 1:
                try:
                    value = int(parts[1])
                except ValueError:
                    pass
        member["respect"] += value
        if value == 1:
            bot.reply_to(message, f"–¢—ã –∂—ë—Å—Ç–∫–æ —Ä–µ—Å–ø–µ–∫—Ç–Ω—É–ª(-–∞) –¥–æ–±—Ä–æ–º—É —á–µ–ª–æ–≤–µ–∫—É! {member['first_name']}, —Ç—ã -–Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—è–∫! \n–£ —Ç–µ–±—è —É–∂–µ {member['respect']} –±–∞–ª–ª(-–æ–≤)!")
        else:
            bot.reply_to(message, f"–ü–ê–ü–û–ß–ö–ê –•–í–ê–õ–ò–¢!\n–£ —Ç–µ–±—è —É–∂–µ {member['respect']} –±–∞–ª–ª(-–æ–≤)!")
    elif message.text.startswith("/-") or message.text.startswith("/neok"):
        value = 1
        if sender_user == "melankolya":
            parts = message.text.split()
            if len(parts) > 1:
                try:
                    value = int(parts[1])
                except ValueError:
                    pass
        member["respect"] -= value
        if value == 1:
            bot.reply_to(message, f"–ù–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫, –∞ –∑–æ–Ω–∞ —Ä–æ—Å—Ç–∞! –°–≤–µ—Ç–∏ —è—Ä—á–µ, {member['first_name']}... \n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {member['respect']} –±–∞–ª–ª(-–æ–≤).")
        else:
            bot.reply_to(message, f"–ì–ù–ï–í –ü–ê–ü–û–ß–ö–ò! –°–≤–µ—Ç–∏ —è—Ä—á–µ, {member['first_name']}... \n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {member['respect']} –±–∞–ª–ª(-–æ–≤).")
    savee_data()

@bot.message_handler(commands=["—Ä–µ–π—Ç–∏–Ω–≥", "ranking"])
def show_respect_ranking(message):
    sorted_members = sorted(members, key=lambda m: m.get("respect", 0), reverse=True)

    ranking = "".join(
        f"{i + 1}. {m['first_name']} {m['last_name']} ‚Äî {m.get('respect', 0)}\n" if m.get("respect") != 0 else ""
        for i, m in enumerate(sorted_members)
    )

    bot.reply_to(message, f"üèÜ *–†–µ–π—Ç–∏–Ω–≥:* üèÜ\n\n{ranking}", parse_mode="Markdown")
    

@bot.message_handler(commands=['–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å', "prob"])
def probability_command(message):
    text = message.text.replace('/–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å', '').strip()  # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
    if not text.lower().startswith("—á—Ç–æ "):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å "—á—Ç–æ "
        bot.reply_to(message, "–ù–∞–ø–∏—à–∏ —Ñ—Ä–∞–∑—É –ø–æ—Å–ª–µ `/–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å`, –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–æ–≤–∞ '—á—Ç–æ'. –ù–∞–ø—Ä–∏–º–µ—Ä: `/–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á—Ç–æ —è —Å–¥–∞–º —Å–µ—Å—Å–∏—é`")
        return
    text = text[4:].strip()  # –£–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–æ "—á—Ç–æ " –∏–∑ —Ç–µ–∫—Å—Ç–∞
    probability = random.randint(0, 100)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
    response = f"{text} —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {probability}%"
    bot.reply_to(message, response)
    

@bot.message_handler(commands=['—Ç–æ–ø', "top"])
def top_command(message):
    text = message.text.replace('/—Ç–æ–ø', '').replace('/top', '').strip()
    
    words = text.split()
    
    if words and words[0].isdigit():  # –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ ‚Äî —á–∏—Å–ª–æ
        count = int(words[0])
        category = " ".join(words[1:]) if len(words) > 1 else "–ª—É—á—à–∏—Ö"
    else:  # –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Å—Ç–∞–≤–∏–º 5 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        count = 5
        category = text if text else "–ª—É—á—à–∏—Ö"
    
    count = min(count, len(members))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

    top_members = random.sample(members, count)  # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –ª—é–¥–µ–π

    response = f"–¢–æ–ø {count} {category} —Å—Ä–µ–¥–∏ –û–ö–æ–≤:\n"
    response += "\n".join([f"{i+1}. {member['first_name']} {member['last_name']}" for i, member in enumerate(top_members)])

    bot.reply_to(message, response)
    

@bot.message_handler(commands=['–º–æ–Ω–µ—Ç–∫–∞', "coin"])
def coin(message):
    response = random.choice(["–û—Ä–µ–ª", "–†–µ—à–∫–∞"])
    bot.reply_to(message, response)
        
@bot.message_handler(commands=['sosal', '—Å–æ—Å–∞–ª'])
def sosal(message):
    bot.reply_to(message, "–î–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê")

@bot.message_handler(func=lambda message: re.search(r'\b–≤–∞–º\b.*\b–≤—Å—ë\b.*\b–ø–æ–Ω—è—Ç–Ω–æ\b', message.text, re.IGNORECASE))
def sosal(message):
    bot.reply_to(message, "–ø—è—Ç—å–¥–µ—Å—è—Ç –¥–≤–∞")
    
@bot.message_handler(func=lambda message: re.search(r'\b—è\b.*\b–Ω–µ\b.*\b—Å–ª—ã—à—É\b', message.text, re.IGNORECASE))
def sosal(message):
    bot.reply_to(message, "–ü–Ø–¢–¨–î–ï–°–Ø–¢ –î–í–ê–ê–ê–ê–ê")
        
@bot.message_handler(commands=['daddy', '–ø–∞–ø–æ—á–∫–∞'])
def daddy(message):
    bot.reply_to(message, "@melankolya")

@bot.message_handler(commands=['granny', '–±–∞–±—É–ª—è'])
def granny(message):
    if message.from_user.username == "enniuum":
        bot.reply_to(message, "–û–π –ø—Ä–∏–≤–µ—Ç –ª—é–±–∏–º–∞—è –±–∞–±—É–ª—è! –Ø –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ —Å —Ç–æ–±–æ–π –ø–æ–æ–±—â–∞—Ç—å—Å—è!")
        return
    bot.reply_to(message, "@enniuum")

@bot.message_handler(commands=["help"])
def show_help(message):
    help_text = (
        "ü§ñ *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –û–ö:*\n\n"
        "üìå */–∏–Ω—Ñ–∞ [—Ñ–∞–º–∏–ª–∏—è] [–∏–º—è]* ‚Äì –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω—É–∂–Ω–æ–º –û–ö–µ.\n"
        "üìå */—à–∏–ø–ø–µ—Ä–∏—Ç—å* ‚Äì —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤—É—Ö –ª—é–¥–µ–π –≤ –ø–∞—Ä—É.\n"
        "üìå */–º—ã—Å–ª—å* ‚Äì –≤—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É.\n"
        "üìå */–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á—Ç–æ [—Ñ—Ä–∞–∑–∞]* ‚Äì –ø—Ä–æ–≤–µ—Ä—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–∞–∫–æ–≥–æ-—Ç–æ —Å–æ–±—ã—Ç–∏—è.\n"
        "üìå */—Ç–æ–ø [—á–∏—Å–ª–æ] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]* ‚Äì –≤—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∏—á–∏–≤—à–∏—Ö—Å—è –û–ö–æ–≤ –≤ –∫–∞–∫–æ–π-—Ç–æ —Å—Ñ–µ—Ä–µ.\n"
        "üìå */—Ü–∏—Ç–∞—Ç–∞* ‚Äì –¥–µ–ª–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è.\n"
        "üìå */–∫–æ–≥–¥–∞* ‚Äì –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –±—É–¥—É—â–µ–µ.\n"
        "üìå */—Ä–µ–π—Ç–∏–Ω–≥* ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –æ–∫/–Ω–µ–æ–∫.\n"
        "üìå */—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å* ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–≤—É—Ö –û–ö–æ–≤.\n"
        "üìå */+* ‚Äì –æ–∫–Ω—É—Ç—å –û–ö–∞, –æ—Ç–≤–µ—Ç–∏–≤ –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "üìå */-* ‚Äì –Ω–µ–û–ö–Ω—É—Ç—å –æ–∫–∞, –æ—Ç–≤–µ—Ç–∏–≤ –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "üìå */help* ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
    )
    bot.reply_to(message, help_text, parse_mode="Markdown")
    

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–∏—Ç–∞—Ç—ã
def generate_quote_image(text, author_name):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ–Ω
    bg = Image.open(BACKGROUND_IMAGE).convert("RGB")
    img_width, img_height = bg.size
    img = bg.copy()
    draw = ImageDraw.Draw(img)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
    font_text = ImageFont.truetype(FONT_TEXT, FONT_SIZE_TEXT)
    font_name = ImageFont.truetype(FONT_NAME, FONT_SIZE_NAME)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    text = text[:200] + "..." if len(text) > 300 else text
    text = f"¬´{text}¬ª"  # –î–æ–±–∞–≤–ª—è–µ–º —ë–ª–æ—á–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ü–∏—Ç–∞—Ç—É –Ω–∞ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
    max_width = img_width * 0.55
    lines = []
    words = text.split()
    current_line = ""
    for word in words:
        test_line = f"{current_line} {word}".strip()
        if draw.textbbox((0, 0), test_line, font=font_text)[2] < max_width:
            current_line = test_line
        else:
            lines.append(current_line)
            current_line = word
    lines.append(current_line)

    # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É –±–ª–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞
    total_text_height = len(lines) * FONT_SIZE_TEXT * 1.2
    text_y = (img_height - total_text_height) / 2 - 70  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏

    # –†–∏—Å—É–µ–º —Ü–∏—Ç–∞—Ç—É (—Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É)
    for line in lines:
        text_width = draw.textbbox((0, 0), line, font=font_text)[2]
        text_x = (img_width - text_width) / 2  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        draw.text((text_x, text_y), line, font=font_text, fill=COLOR_TEXT)
        text_y += FONT_SIZE_TEXT * 1.2  # –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª

    # –ü–æ–∑–∏—Ü–∏—è –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if "None" in author_name:
        author_name = author_name[:-5]
    name_width = draw.textbbox((0, 0), author_name, font=font_name)[2]
    name_x = img_width - name_width - 200  # 80 –ø–∏–∫—Å–µ–ª–µ–π –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
    name_y = img_height - 150  # –í–Ω–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    draw.text((name_x, name_y), author_name, font=font_name, fill=COLOR_NAME)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    output = BytesIO()
    img.save(output, format="PNG")
    output.seek(0)
    return output


# –ö–æ–º–∞–Ω–¥–∞ /—Ü–∏—Ç–∞—Ç–∞
@bot.message_handler(commands=["—Ü–∏—Ç–∞—Ç–∞", "quote"])
def send_quote(message):
    if not message.reply_to_message or not message.reply_to_message.text:
        bot.reply_to(message, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º.")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = message.reply_to_message.text
    author_telegram = f"@{message.reply_to_message.from_user.username}" if message.reply_to_message.from_user.username else None
    author_name = f"{message.reply_to_message.from_user.first_name} {message.reply_to_message.from_user.last_name}".strip() or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –û–ö"

    # –ò—â–µ–º –∞–≤—Ç–æ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ members
    author = next((m for m in members if m["telegram"] == author_telegram), None)
    if author:
        author_name = f"{author['first_name']} {author['last_name']}"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = generate_quote_image(text, author_name)
    os.makedirs(MEDIA_FOLDER, exist_ok=True)
    file_path = os.path.join(MEDIA_FOLDER, f"quote_{message.message_id}.jpg")
    with open(file_path, "wb") as f:
        f.write(img.getvalue())
    img = generate_quote_image(text, author_name)
    bot.send_photo(message.chat.id, img, reply_to_message_id=message.message_id)

quote_parts = []
quote_author = None

@bot.message_handler(commands=["–∑–∞–ø–æ–º–Ω–∏"])
def remember_quote(message):
    global quote_parts, quote_author
    
    if not message.reply_to_message or not message.reply_to_message.text:
        bot.reply_to(message, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º.")
        return
    
    if not quote_parts:
        quote_author = message.reply_to_message.from_user.username
    
    quote_parts.append(message.reply_to_message.text)
    bot.reply_to(message, "–ó–∞–ø–æ–º–Ω–∏–ª!")

@bot.message_handler(commands=["–æ—Ç–ø—Ä–∞–≤—å"])
def send_stored_quote(message):
    global quote_parts, quote_author
    
    if not quote_parts:
        bot.reply_to(message, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã.")
        return
    
    author_name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –û–ö"
    if quote_author:
        author = next((m for m in members if m["telegram"] == f"@{quote_author}"), None)
        if author:
            author_name = f"{author['first_name']} {author['last_name']}"
    
    text = ", ".join(quote_parts)
    img = generate_quote_image(text, author_name)
    os.makedirs(MEDIA_FOLDER, exist_ok=True)
    file_path = os.path.join(MEDIA_FOLDER, f"quote_{message.message_id}.jpg")
    with open(file_path, "wb") as f:
        f.write(img.getvalue())
    bot.send_photo(message.chat.id, img, reply_to_message_id=message.message_id)
    
    quote_parts = []
    quote_author = None



@bot.message_handler(commands=["–º—ã—Å–ª—å", "think"])
def send_random_photo(message):
    """–í—ã–±–∏—Ä–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö."""
    files = [f for f in os.listdir(MEDIA_FOLDER) if f.endswith(".jpg")]
    
    if not files:
        bot.reply_to(message, "–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return
    
    random_file = random.choice(files)
    file_path = os.path.join(MEDIA_FOLDER, random_file)
    with open(file_path, "rb") as file:
        bot.send_photo(message.chat.id, file)


@bot.message_handler(commands=["–∫–æ–≥–¥–∞", "when"])
def when_command(message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–∫–æ–≥–¥–∞ [–≤–∞—à –≤–æ–ø—Ä–æ—Å]")
        return
    else:
        user_text = args[1].strip('?')

        # –ó–∞–º–µ–Ω—è–µ–º "—è" –Ω–∞ "—Ç—ã"
        user_text = re.sub(r'\b–Ø\b', '–¢—ã', user_text, flags=re.IGNORECASE)

        # –ó–∞–º–µ–Ω—è–µ–º –≥–ª–∞–≥–æ–ª—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–µ –ª–∏—Ü–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
        user_text = re.sub(r'\b(—Å–º–æ–≥—É|—Å–¥–µ–ª–∞—é|–∫—É–ø–ª—é|—É–∑–Ω–∞—é|—É–≤–∏–∂—É|–Ω–∞–π–¥—É|–ø–æ–π–º—É|–∑–∞–∫–æ–Ω—á—É|–Ω–∞—á–Ω—É|–ø–æ–∑–æ–≤—É|—Å–∫–∞–∂—É|–Ω–∞–ø–∏—à—É|–ø–æ–π–¥—É|–ø—Ä–∏–µ–¥—É|–ø—Ä–æ—á–∏—Ç–∞—é|–≤—ã—É—á—É|–ø–æ—Å—Ç—Ä–æ—é|–ø–æ–ª—É—á—É|–¥–æ–±—å—é—Å—å|—Ä–∞—Å—Å–∫–∞–∂—É|—Å—Ç–∞–Ω—É|–≤–æ–∑—å–º—É)\b', 
                        lambda m: {
                            '—Å–º–æ–≥—É': '—Å–º–æ–∂–µ—à—å',
                            '—Å–¥–µ–ª–∞—é': '—Å–¥–µ–ª–∞–µ—à—å',
                            '–∫—É–ø–ª—é': '–∫—É–ø–∏—à—å',
                            '—É–∑–Ω–∞—é': '—É–∑–Ω–∞–µ—à—å',
                            '—É–≤–∏–∂—É': '—É–≤–∏–¥–∏—à—å',
                            '–Ω–∞–π–¥—É': '–Ω–∞–π–¥—ë—à—å',
                            '–ø–æ–π–º—É': '–ø–æ–π–º—ë—à—å',
                            '–∑–∞–∫–æ–Ω—á—É': '–∑–∞–∫–æ–Ω—á–∏—à—å',
                            '–Ω–∞—á–Ω—É': '–Ω–∞—á–Ω—ë—à—å',
                            '–ø–æ–∑–æ–≤—É': '–ø–æ–∑–æ–≤—ë—à—å',
                            '—Å–∫–∞–∂—É': '—Å–∫–∞–∂–µ—à—å',
                            '–Ω–∞–ø–∏—à—É': '–Ω–∞–ø–∏—à–µ—à—å',
                            '–ø–æ–π–¥—É': '–ø–æ–π–¥—ë—à—å',
                            '–ø—Ä–∏–µ–¥—É': '–ø—Ä–∏–µ–¥–µ—à—å',
                            '–ø—Ä–æ—á–∏—Ç–∞—é': '–ø—Ä–æ—á–∏—Ç–∞–µ—à—å',
                            '–≤—ã—É—á—É': '–≤—ã—É—á–∏—à—å',
                            '–ø–æ—Å—Ç—Ä–æ—é': '–ø–æ—Å—Ç—Ä–æ–∏—à—å',
                            '–ø–æ–ª—É—á—É': '–ø–æ–ª—É—á–∏—à—å',
                            '–¥–æ–±—å—é—Å—å': '–¥–æ–±—å—ë—à—å—Å—è',
                            '—Ä–∞—Å—Å–∫–∞–∂—É': '—Ä–∞—Å—Å–∫–∞–∂–µ—à—å',
                            '—Å—Ç–∞–Ω—É': '—Å—Ç–∞–Ω–µ—à—å',
                            '–≤–æ–∑—å–º—É': '–≤–æ–∑—å–º—ë—à—å'
                        }[m.group()], user_text)

        # –î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–º–µ–Ω—ã
        user_text = re.sub(r'\b–º–æ–π\b', '—Ç–≤–æ–π', user_text)
        user_text = re.sub(r'\b–º–æ—è\b', '—Ç–≤–æ—è', user_text)
        user_text = re.sub(r'\b–º–æ–∏\b', '—Ç–≤–æ–∏', user_text)
        random_time = random.choice(TIME_VARIANTS)
        
        bot.reply_to(message, f"{user_text} {random_time}.")


@bot.message_handler(commands=['faculty', '—Ñ–∞–∫—É–ª—å—Ç–µ—Ç'])
def filter_by_faculty(message):
    faculty_name = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else ''
    filtered_members = [member for member in members if member["faculty"].lower() == faculty_name.lower()]
    
    if not filtered_members:
        bot.reply_to(message, "–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ.")
        return
    
    response = "–û–±—É—á–∞—é—â–∏–µ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã —Å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ {}:\n".format(faculty_name)
    for member in filtered_members:
        response += "{} {} ({})\n".format(
            member["first_name"], member["last_name"], member["group"]
        )
    
    bot.reply_to(message, response)
    

def get_zodiac_sign(day, month):
    zodiac_dates = [
        ((1, 20), (2, 18), "–í–æ–¥–æ–ª–µ–π"),
        ((2, 19), (3, 20), "–†—ã–±—ã"),
        ((3, 21), (4, 19), "–û–≤–µ–Ω"),
        ((4, 20), (5, 20), "–¢–µ–ª–µ—Ü"),
        ((5, 21), (6, 20), "–ë–ª–∏–∑–Ω–µ—Ü—ã"),
        ((6, 21), (7, 22), "–†–∞–∫"),
        ((7, 23), (8, 23), "–õ–µ–≤"),
        ((8, 24), (9, 22), "–î–µ–≤–∞"),
        ((9, 23), (10, 22), "–í–µ—Å—ã"),
        ((10, 23), (11, 21), "–°–∫–æ—Ä–ø–∏–æ–Ω"),
        ((11, 22), (12, 21), "–°—Ç—Ä–µ–ª–µ—Ü"),
        ((12, 22), (1, 19), "–ö–æ–∑–µ—Ä–æ–≥")
    ]
    for start, end, sign in zodiac_dates:
        if (month == start[0] and day >= start[1]) or (month == end[0] and day <= end[1]):
            return sign
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫"

@bot.message_handler(commands=['zodiac', '–∑–Ω–∞–∫'])
def filter_by_zodiac(message):
    zodiac_name = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else ''
    
    if zodiac_name.lower() == "–≤–æ–¥–æ–ª–µ—è":
        lyrics = [
            "–í–°–Å –û–¢–î–ê–õ–ê –ò –ù–ò –û –ß–Å–ú –ù–ï –ñ–ê–õ–ï–Æ",
            "–í–°–Å –û–¢–î–ê–õ–ê –ò –ù–ò–ß–ï–ì–û –ù–ï –û–°–¢–ê–õ–û–°–¨",
            "–ê –†–Ø–î–û–ú –°–¢–û–õ–¨–ö–û –ß–ï–õ–û–í–ï–ö –ü–û–¢–ï–†–Ø–õ–û–°–¨",
            "–Ø –≠–¢–ò–ú –ß–£–í–°–¢–í–û–ú –£–ñ–ï –í–ï–ö –ù–ï –ë–û–õ–ï–Æ",
            "–í–°–Å –û–¢–î–ê–õ–ê –ò –ù–ò –û –ß–Å–ú –ù–ï –ñ–ê–õ–ï–Æ",
            "–ò –í–û–ü–†–ï–ö–ò –õ–ï–ß–£ –í–°–ï–ú –ê–í–¢–û–ü–ò–õ–û–¢–ê–ú",
            "–ñ–ò–í–£ –ù–ê–ó–õ–û –ì–û–†–û–°–ö–û–ü–ê–ú"
        ]
        for line in lyrics:
            bot.send_message(message.chat.id, line)
            time.sleep(7)
        return 
    
    filtered_members = []
    
    for member in members:
        day, month, _ = map(int, member["birth_date"].split('.'))
        if get_zodiac_sign(day, month).lower() == zodiac_name.lower():
            filtered_members.append(member)
    
    if not filtered_members:
        bot.reply_to(message, "–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å —Ç–∞–∫–∏–º –∑–Ω–∞–∫–æ–º –∑–æ–¥–∏–∞–∫–∞.")
        return
    
    response = "–û–±—É—á–∞—é—â–∏–µ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã —Å–æ –∑–Ω–∞–∫–æ–º –∑–æ–¥–∏–∞–∫–∞ {}:\n".format(zodiac_name)
    for member in filtered_members:
        response += "{} {} ({})\n".format(
            member["first_name"], member["last_name"], member["birth_date"]
        )
    
    bot.reply_to(message, response)
    
@bot.message_handler(func=lambda message: message.reply_to_message is not None)
def auto_respect(message):
    reply_user = message.reply_to_message.from_user.username
    sender_user = message.from_user.username

    if not reply_user or not sender_user or (reply_user == sender_user and sender_user != "melankolya"):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —ç—Ç–æ —Å–∞–º–æ—Ä–µ—Å–ø–µ–∫—Ç

    member = next((m for m in members if m['telegram'].strip('@') == reply_user), None)
    if not member:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ

    if "respect" not in member:
        member["respect"] = 0  
    
    text = message.text.lower()
    if any(word in text for word in ["+", "‚ù§Ô∏è", "–ø–∞—Å–∏–±", "—Å–ø—Å", "–±–ª–∞–≥–æ–¥–∞—Ä", "—Ä–µ—Å–ø–µ–∫—Ç"]):
        member["respect"] += 1
        bot.reply_to(message, f"–°–ø–∞—Å–∏–±–æ –Ω–∞ —Ö–ª–µ–± –Ω–µ –Ω–∞–º–∞–∂–µ—à—å, –∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–ª - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—è—Ç–Ω–æ. {member['first_name']}, \n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {member['respect']} –±–∞–ª–ª(-–æ–≤)!")
    savee_data()
    
@bot.message_handler(func=lambda message: True)
def stosorok(message):
    text = message.text.lower()
    if text == "–∞":
        lyrics = [
            "–ê-–ê-–ê-–ê, –û-–û-–û-–û",
            "140 ‚Äî –°–ö–û–†–û–°–¢–¨ –ù–ê –ö–†–ê–ô –°–í–ï–¢–ê –í –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ò –í–ï–¢–†–ê",
            "–ê-–ê-–ê-–ê, –û-–û-–û-–û",
            "–ë–´–õ–ò –°–í–Ø–ó–ê–ù–ù–´–ï –õ–ï–ù–¢–û–ô –ö–†–ê–°–ù–û–ì–û –ó–ê–ö–ê–¢–ê",
            "–ê-–ê-–ê-–ê, –û-–û-–û-–û",
            "140 ‚Äî –°–ö–û–†–û–°–¢–¨ –ù–ê –ö–†–ê–ô –°–í–ï–¢–ê –í –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ò –í–ï–¢–†–ê",
            "–ê-–ê-–ê-–ê, –û-–û-–û-–û",
            "–ë–´–õ–ò –°–í–Ø–ó–ê–ù–ù–´–ï –õ–ï–ù–¢–û–ô –ö–†–ê–°–ù–û–ì–û –ó–ê–ö–ê–¢–ê"
        ]
        for line in lyrics:
            bot.send_message(message.chat.id, line)
            time.sleep(7)
        return

while True:
    try:
        bot.polling(none_stop=True, timeout=60)
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–æ Ctrl + C
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞: {e}")  # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        time.sleep(10)  # –ñ–¥—ë–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
        